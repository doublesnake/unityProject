//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18444
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;


namespace AssemblyCSharp
{
	/* Class to manage inputs and mapping */
	public class InputControl
	{
		// Double Tap variables
		public float tapCooldown = 0.3f;
		public int tapCount = 0;
		public float runPressTime = 0.3f;
		public float lastTapTime = 0;
		public bool doubleTap = false;
		public bool doubleTapPress = false;
		public KeyCode lastKeyDown = KeyCode.None;
		
		
		// Keycode Mapping variables
		public KeyCode left;
		public KeyCode up;
		public KeyCode right;
		public KeyCode punch;
		
		// State variables
		private bool canMove;
		public bool isDashingLeft;
		public bool isDashingRight;
		public bool isRunningLeft;
		public bool isRunningRight;
		
		// Constructor
		public InputControl()
		{
			left = KeyCode.A;
			up = KeyCode.W;
			right = KeyCode.D;
			punch = KeyCode.Keypad1;
		}
		
		public bool isMovingLeft()
		{
			if (Input.GetKey (left)) 
			{
				return true;
			}
			return false;
		}
		
		public bool isJumping()
		{
			if (Input.GetKeyDown (up)) 
				return true;
			return false;
		}
		
		public bool isMovingRight()
		{
			if (Input.GetKey (right)) 
			{
				return true;
			}
			return false;
		}
		public bool isDashing()
		{
			if (isDashingLeft || isDashingRight)
				return true;
			return false;
		}

		public bool isRunning()
		{
			if (isRunningLeft || isRunningRight)
				return true;
			return false;
		}

		public void setRunning(bool val)
		{
			isRunningLeft = val;
			isRunningRight = val;
		}

		public void setDashing(bool val)
		{
			isDashingLeft = val;
			isDashingRight = val;
		}
		
		public bool isPunching()
		{
			if (Input.GetKeyDown (punch))
				return true;
			return false;
		}
		
		public void checkInputStates()
		{
			
			setDashing (false);

			if (doubleTap) {
				if(Input.GetKey(lastKeyDown))
				{
					if(Time.time - lastTapTime > runPressTime)
					{
						doubleTapPress = true;
						doubleTap = false;
						Debug.Log("RUN");
					}
				}
				else
				{
					doubleTap = false;
				}
				return;
			}

			if (doubleTapPress) {
				if(!Input.GetKey(lastKeyDown))
				{
					doubleTapPress = false;
					setRunning(false);
				}
				else{
					
					if (lastKeyDown == left)
						isRunningLeft = true;
					if (lastKeyDown == right)
						isRunningRight = true;
				}
				return;
			}

			if (Input.anyKeyDown) {
				KeyCode currentKey = getCurrentKey ();
				if (tapCount == 1 && currentKey == lastKeyDown) {
					
					if (Time.time - lastTapTime < tapCooldown) {
						if (lastKeyDown == left)
							isDashingLeft = true;
						if (lastKeyDown == right)
							isDashingRight = true;
						Debug.Log("DASH");
						doubleTap = true;
						tapCount = 0;
					}
				}
				if (!doubleTap) {
					lastKeyDown = (currentKey != KeyCode.None) ? currentKey : lastKeyDown;
					lastTapTime = Time.time;
					
					tapCount = 1;
				}
			}
		}

		
		public KeyCode getCurrentKey()
		{
			if (Input.GetKeyDown (left))
				return left;
			if (Input.GetKeyDown (right))
				return right;
			if (Input.GetKeyDown (up))
				return up;
			if (Input.GetKeyDown (punch))
				return punch;
			return KeyCode.None;
		}
	}
}

